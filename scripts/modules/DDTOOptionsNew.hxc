import funkin.modding.module.Module;
import funkin.play.PlayState;
import funkin.Preferences;
import funkin.PlayerSettings;
import funkin.Highscore;
import funkin.audio.FunkinSound;
import funkin.Paths;
import flixel.FlxG;
import funkin.ui.options.OptionsState;
import flixel.FlxG;
import flixel.util.FlxSave;
import funkin.ui.options.PreferencesMenu;

class DDTOOptionsNew extends Module
{
    function new(){
        super("DDTOOptionsNew");

		save = new FlxSave();
        save.bind("TakeoverOptions");
		save.data.titlescreen = (save.data.titlescreen != null) ? save.data.titlescreen : true;
		save.data.menus = (save.data.menus != null) ? save.data.menus : false; //Scrapped for being buggy
		save.data.selfaware = (save.data.selfaware != null) ? save.data.selfaware : true;
		save.data.gfCountdown = (save.data.gfCountdown != null) ? save.data.gfCountdown : true;
		save.data.bloom = (save.data.bloom != null) ? save.data.bloom : true;
		save.data.freeplayDialogue = (save.data.freeplayDialogue != null) ? save.data.freeplayDialogue : true;
		save.data.cool = (save.data.cool != null) ? save.data.cool : false;
		save.data.markov = (save.data.markov != null) ? save.data.markov : true;
		save.data.random = (save.data.random != null) ? save.data.random : false;
		save.data.pixel = (save.data.pixel != null) ? save.data.pixel : true;
		save.data.psychholds = (save.data.psychholds != null) ? save.data.psychholds : false;
		save.data.costumesanywhere = (save.data.costumesanywhere != null) ? save.data.costumesanywhere : false;
		//save.data.mirror = (save.data.mirror != null) ? save.data.mirror : false;

		save.flush();
    }
		
	function onStateChangeEnd(callback)
	{
		super.onStateChangeEnd(callback);
		if (!Std.is(callback.targetState, OptionsState))
			return;
		var preferencePage:PreferencesMenu = callback.targetState.optionsCodex.addPage('doki', new PreferencesMenu());
		preferencePage.onExit.add(function() {
			FlxG.state.optionsCodex.switchPage('options');
		});

		preferencePage.preferenceDesc = [];
		preferencePage.items.clear();	
		preferencePage.preferenceItems.clear();
		callback.targetState.optionsCodex.pages.get('options').createItem("DDTO Options", function() FlxG.state.optionsCodex.switchPage('doki'));
		for (item in callback.targetState.optionsCodex.pages.get('options').items){
			item.y -= 80;
		}

		if (preferencePage != null) {
			preferencePage.createPrefItemCheckbox("DDTO Title Screen", "Changes the title screen to resemble the one from\nDoki Doki Takeover Plus.", (value) -> {
				save.data.titlescreen = value;
				save.flush();
			}, save.data.titlescreen);
			//Scrapped due to being extremely buggy
			preferencePage.createPrefItemCheckbox("DDTO Menus", "Changes the other menus to be the ones from DDTO.\n(NOT COMPATIBLE WITH OTHER MODS / BASE GAME)", (value) -> {
				save.data.menus = value;
				save.flush();
			}, save.data.menus);
			preferencePage.createPrefItemCheckbox("Pixel Perfect Rendering", "Enables pixel perfect rendering for pixel sprites\nlike in pre 0.6.0 FNF versions.", (value) -> {
				save.data.pixel = value;
				save.flush();
			}, save.data.pixel);
			preferencePage.createPrefItemCheckbox("Self Awareness", "Allows Monika to access to your PC name\n(IF DISABLED SHE'LL USE YOUR NEWGROUNDS NAME IF LOGGED IN)", (value) -> {
				save.data.selfaware = value;
				save.flush();
			}, save.data.selfaware);
			preferencePage.createPrefItemCheckbox("Girlfriend Countdown", "Have Girlfriend count down before the song starts.", (value) -> {
				save.data.gfCountdown = value;
				save.flush();
			}, save.data.gfCountdown);
			preferencePage.createPrefItemCheckbox("Bloom Shader", "Enables the Bloom Shader in the Evil and Festival clubrooms.\n(DISABLE IF YOU EXPERIENCE LAG IN THOSE STAGES)", (value) -> {
				save.data.bloom = value;
				save.flush();
			}, save.data.bloom);
			preferencePage.createPrefItemCheckbox("Markov Notes", "Self Explanatory. Enables Markov Notes.", (value) -> {
				save.data.markov = value;
				save.flush();
			}, save.data.markov);
			preferencePage.createPrefItemCheckbox("Freeplay Cutscenes", "Allows songs in Freeplay to play cutscenes\n(Ex. Epiphany, Epiphany with Lyrics, Catfight).", (value) -> {
				save.data.freeplayDialogue = value;
				save.flush();
			}, save.data.freeplayDialogue);
			preferencePage.createPrefItemCheckbox("Cool Gameplay", "Enables 9 Key Modchart Enabled Ultra Difficult Gameplay mode.\n(Ray Tracing Enabled, DLSS, Frame Generation)", (value) -> {
				save.data.cool = value;
				save.flush();
			}, save.data.cool);
			preferencePage.createPrefItemCheckbox("Randomize Notes", "Enables randomized note placements\n(Automatically disables Markov Notes).", (value) -> {
				save.data.random = value;
				save.flush();
			}, save.data.random);
			preferencePage.createPrefItemCheckbox("Psych Engine Hold Anims", "Recreates Psych's jitter animations while holding notes.\n(EXPERIMENTAL & MAY NOT BE FULLY ACCURATE)", (value) -> {
				save.data.psychholds = value;
				save.flush();
			}, save.data.psychholds);
			preferencePage.createPrefItemCheckbox("Costumes Anywhere", "Allows BF and GF to use their costumes in non-DDTO songs\n(WARNING: May cause issues in modded songs)", (value) -> {
				save.data.costumesanywhere = value;
				save.flush();
			}, save.data.costumesanywhere);
			/*preferencePage.createPrefItemCheckbox("Mirror Mode", "Play as the opponent (UNFINISHED & DOES NOTHING)", (value) -> {
				save.data.mirror = value;
				save.flush();
			}, save.data.mirror);*/
		}
	}
}