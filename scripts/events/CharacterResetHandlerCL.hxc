import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.modding.events.SongLoadScriptEvent;
import funkin.play.PlayState;
import funkin.graphics.FunkinSprite;

import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.play.components.HealthIcon;

class CharacterResetHandlerCL extends Module {

	function new() {
		super("CharacterResetHandlerCL");
	}

	private var currentCharacterData;
	private var characterZIndexes = null;
	private var bfIndex;
	private var gfIndex;
	private var dadIndex;

	override function onSongLoaded(event) {
		super.onSongLoaded(event);
		for (events in event.events){
			if (events.eventKind == 'ChangeCharacterCL'){
				var _data = CharacterDataParser.fetchCharacter(events.value.newchar);
				FunkinSprite.cacheSparrow(_data.assetPath);
				if (Std.string(_data.renderType) == 'MultiSparrow'){
					var assetList = [];
					for (anim in _data.animations) {
						if (anim.assetPath != null && !assetList.contains(anim.assetPath)){
							assetList.push(anim.assetPath);
							FunkinSprite.cacheSparrow(anim.assetPath);
						}
					}
				}
			}
		}
	}	

	public override function onCountdownStart(event) {
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;

		if (PlayState.instance.currentStage.getBoyfriend() != null){
			bfIndex = PlayState.instance.currentStage.getBoyfriend().zIndex;
		} else {
			bfIndex = 0;
		}
		if (PlayState.instance.currentStage.getGirlfriend() != null){
			gfIndex = PlayState.instance.currentStage.getGirlfriend().zIndex;
		} else {
			gfIndex = 0;
		}
		if (PlayState.instance.currentStage.getDad() != null){
			dadIndex = PlayState.instance.currentStage.getDad().zIndex;
		} else {
			dadIndex = 0;
		}

		characterZIndexes = ["bf" => bfIndex, "gf" => gfIndex, "dad" => dadIndex];

		// trace("ZINDEXES: " + characterZIndexes);

		super.onCountdownStart(event);

		currentCharacterData = PlayState.instance.get_currentChart().characters;
	}

	override function onSongRetry(event) {
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;
		super.onSongRetry(event);
		
		// GF reset

		if (PlayState.instance.currentStage.getGirlfriend() != null) PlayState.instance.currentStage.getGirlfriend().destroy();
		var girlfriend = CharacterDataParser.fetchCharacter(currentCharacterData.girlfriend);
		if (girlfriend != null) {
			girlfriend.set_characterType(CharacterType.GF);
			PlayState.instance.currentStage.addCharacter(girlfriend, CharacterType.GF);
		}

		// BF reset

		if (PlayState.instance.currentStage.getBoyfriend() != null) PlayState.instance.currentStage.getBoyfriend().destroy();
		var boyfriend = CharacterDataParser.fetchCharacter(currentCharacterData.player);
		if (boyfriend != null) {
			boyfriend.set_characterType(CharacterType.BF);
			boyfriend.initHealthIcon(false);
			PlayState.instance.currentStage.addCharacter(boyfriend, CharacterType.BF);
		}

		// DAD reset

		if (PlayState.instance.currentStage.getDad() != null) PlayState.instance.currentStage.getDad().destroy();
		var dad = CharacterDataParser.fetchCharacter(currentCharacterData.opponent);
		if (dad != null) {
			dad.set_characterType(CharacterType.DAD);
			dad.initHealthIcon(true);
			PlayState.instance.currentStage.addCharacter(dad, CharacterType.DAD);
		}
	}
}