import flixel.FlxG;
import funkin.play.PlayState;
import flixel.tweens.FlxTween;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxEase;
import funkin.Paths;
import funkin.play.song.Song;
import funkin.play.Countdown;
import funkin.util.Constants;
import funkin.Conductor;
import funkin.util.FlxTweenUtil;
import funkin.play.PlayStatePlaylist;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import flixel.util.FlxSave;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.Module;
import funkin.graphics.FunkinCamera;
import flixel.group.FlxTypedSpriteGroup;
import funkin.modding.module.Module;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import StringTools;

class LoveNFunkinSong extends Song
{
	function new()
	{
		super('love-n-funkin');

		options = new FlxSave();
		options.bind("TakeoverOptions");	
	}

	var playStrumDefaultPos = [];
	var oppStrumDefaultPos = [];
	var yuri;
	var natsuki;
	var monika;
	var dokiData:Array<Float> = [];
	var sideWindow:FlxSprite;
	var camGame2:FunkinCamera;
	var savedChar:String;
	var poemVideo:FlxAtlasSprite;

	override function onCreate(event) {
		super.onCreate(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;

		camGame2 = new FunkinCamera('playStateCamGame2');
		FlxG.cameras.add(camGame2, false);
		camGame2.bgColor = 0x000000;

		FlxG.cameras.remove(PlayState.instance.camHUD, false);
		FlxG.cameras.add(PlayState.instance.camHUD, false);	

		FlxG.cameras.remove(PlayState.instance.camCutscene, false);
		FlxG.cameras.add(PlayState.instance.camCutscene, false);

		var poemSprite:String = (PlayState.instance.currentVariation == 'pico') ? 'notepad/picohandoatlas' : 'notepad/handoatlas';
		poemVideo = new FlxAtlasSprite(0, 0, Paths.animateAtlas(poemSprite));
		poemVideo.showPivot = false;
		poemVideo.anim.addBySymbol('hando', 'lnf video');
		poemVideo.anim.play('hando');
		poemVideo.scrollFactor.set();
		poemVideo.setGraphicSize(Std.int(poemVideo.width / PlayState.instance.stageZoom));
		poemVideo.updateHitbox();
		poemVideo.cameras = [camGame2];
		poemVideo.alpha = 0.001;
		PlayState.instance.add(poemVideo);

		sideWindow = new FlxSprite(0, 0, Paths.image('notepad/SideWindow'));
		sideWindow.setGraphicSize(Std.int(sideWindow.width / PlayState.instance.stageZoom));
		sideWindow.updateHitbox();
		sideWindow.y = FlxG.height - sideWindow.height;
		sideWindow.scrollFactor.set(0, 0);
		sideWindow.cameras = [camGame2];
		sideWindow.alpha = 0.001;
		PlayState.instance.add(sideWindow);

		savedChar = ''; //Used so we can reset the character if they are on the side
	}

	function onNoteHit(callback){
		if (PlayState.instance == null) return;
	
		switch (callback.note.noteData.kind) {
			case "GF Sing":
				yuri.holdTimer = 0;
				yuri.playSingAnimation(callback.note.noteData.getDirection(), false);
			case "Hurt Note":
				natsuki.holdTimer = 0;
				natsuki.playSingAnimation(callback.note.noteData.getDirection(), false);
			case "Monika":
				monika.holdTimer = 0;
				monika.playSingAnimation(callback.note.noteData.getDirection(), false);
		}
	}

	override function onUpdate(event:UpdateScriptEvent) {
		super.onUpdate(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;

		if (camGame2 != null) camGame2.zoom = FlxG.camera.zoom;
		processNotes(event);
	}

	function stutterNotes(elapsed:Float):Void
		{
			// Process hold notes on the opponent's side.
			for (holdNote in PlayState.instance.opponentStrumline.holdNotes.members)
				{
					if (holdNote == null || !holdNote.alive) continue;
					
					// While the hold note is being hit, and there is length on the hold note...
					if (holdNote.hitNote && !holdNote.missedNote && holdNote.sustainLength > 0)
						{
							switch (holdNote.noteData.kind) {
								case "GF Sing":
									if (yuri.isSinging()) yuri.animation.curAnim.restart();
								case "Hurt Note":
									if (natsuki.isSinging()) natsuki.animation.curAnim.restart();
								case "Monika":
									if (monika.isSinging()) monika.animation.curAnim.restart();
							}
						}
				}  
		}


	function processNotes(elapsed:Float):Void
		{
			// Process hold notes on the opponent's side.
			for (holdNote in PlayState.instance.opponentStrumline.holdNotes.members)
				{
					if (holdNote == null || !holdNote.alive) continue;
					
					// While the hold note is being hit, and there is length on the hold note...
					if (holdNote.hitNote && !holdNote.missedNote && holdNote.sustainLength > 0)
						{
							switch (holdNote.noteData.kind) {
								case "GF Sing":
									if (yuri.isSinging()) yuri.holdTimer = 0;
								case "Hurt Note":
									if (natsuki.isSinging()) natsuki.holdTimer = 0;
								case "Monika":
									if (monika.isSinging()) monika.holdTimer = 0;
							}
						}
				}
			  
		}

	override function onSongLoaded(event) {
		super.onSongLoaded(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;

		createDokis();
	}
	
	override function onSongEnd(event) {
		super.onSongEnd(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;
	}

	override function onDestroy(event) {
		super.onDestroy(event);
		if (yuri != null) {
			yuri = null;
		}
		if (natsuki != null) {
			natsuki = null;
		}
		if (monika != null) {
			monika = null;
		}
	}
	function createDokis(){
		if (yuri != null || natsuki != null || monika != null) return;
		var costume = ModuleHandler.getModule("CostumeSwapper");

		var natsukiName = costume.scriptCall('getCostumeName', ['natsuki']);
		var yuriName = costume.scriptCall('getCostumeName', ['yuri']);
		var monikaName = costume.scriptCall('getCostumeName', ['monika']);

		yuri = CharacterDataParser.fetchCharacter(yuriName);
		if (yuri != null) {
			yuri.set_characterType(CharacterType.OTHER);
			PlayState.instance.currentStage.addCharacter(yuri, CharacterType.OTHER);
		}
		yuri.zIndex = PlayState.instance.currentStage.getDad().zIndex - 1;
		var stageCharData = PlayState.instance.currentStage._data.characters.dad;
		yuri.x = (stageCharData.position[0] - yuri.characterOrigin.x) + 200;
		yuri.y = (stageCharData.position[1] - yuri.characterOrigin.y) - 20;

		yuri.originalPosition.set(yuri.x, yuri.y);  

		natsuki = CharacterDataParser.fetchCharacter(natsukiName);
		if (natsuki != null) {
			natsuki.set_characterType(CharacterType.OTHER);
			PlayState.instance.currentStage.addCharacter(natsuki, CharacterType.OTHER);
		}
		natsuki.zIndex = PlayState.instance.currentStage.getDad().zIndex + 1;
		var stageCharData = PlayState.instance.currentStage._data.characters.dad;
		natsuki.x = (stageCharData.position[0] - natsuki.characterOrigin.x) - 200;
		natsuki.y = (stageCharData.position[1] - natsuki.characterOrigin.y) + 20;

		natsuki.originalPosition.set(natsuki.x, natsuki.y);  

		monika = CharacterDataParser.fetchCharacter(monikaName);
		if (monika != null) {
			monika.set_characterType(CharacterType.OTHER);
			PlayState.instance.currentStage.addCharacter(monika, CharacterType.OTHER);
		}
		monika.zIndex = PlayState.instance.currentStage.getDad().zIndex - 2;
		var stageCharData = PlayState.instance.currentStage._data.characters.dad;
		monika.x = (stageCharData.position[0] - monika.characterOrigin.x) + 450;
		monika.y = (stageCharData.position[1] - monika.characterOrigin.y) - 20;

		monika.originalPosition.set(monika.x, monika.y);  

		PlayState.instance.currentStage.refresh();
	}

	override function onCountdownStart(event) {
		super.onCountdownStart(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;

		PlayState.instance.iconP2.loadCharacter('our-harmony');
	}

	function calcSectionLength(duration:Int){
		if (duration == null) duration = 1;
		var durSeconds = (Conductor.instance.stepLengthMs * (16 * duration)) / 1000;
		return durSeconds;
	}

	function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);
		sideWindow.alpha = 0.001;
		poemVideo.alpha = 0.001;
		switch (savedChar) {
			case 'monika':
				FlxTween.cancelTweensOf(monika);
				PlayState.instance.remove(monika);
				PlayState.instance.currentStage.insert(Std.int(dokiData[6]), monika);
				monika.setPosition(dokiData[0], dokiData[1]);
				monika.scrollFactor.set(dokiData[2], dokiData[3]);
				monika.scale.set(dokiData[4], dokiData[5]);
				monika.updateHitbox();
				monika.cameras = [PlayState.instance.camGame];
				monika.dance();
			case 'yuri':
				FlxTween.cancelTweensOf(yuri);
				PlayState.instance.remove(yuri);
				PlayState.instance.currentStage.insert(Std.int(dokiData[6]), yuri);
				yuri.setPosition(dokiData[0], dokiData[1]);
				yuri.scrollFactor.set(dokiData[2], dokiData[3]);
				yuri.scale.set(dokiData[4], dokiData[5]);
				yuri.updateHitbox();
				yuri.cameras = [PlayState.instance.camGame];
				yuri.dance();
		}
		PlayState.instance.cameraZoomRate = 4;
		PlayState.instance.iconP2.loadCharacter('our-harmony');
	}	  

	function onStepHit(event:SongTimeScriptEvent):Void
		{	
			super.onStepHit(event);
			if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
			if (PlayState.instance.isMinimalMode) return;
			if (options.data.psychholds) stutterNotes();	

			switch(event.step)
			{
				case 384:
					savedChar = 'yuri';
					dokiData = [
						yuri.x,
						yuri.y,
						yuri.scrollFactor.x,
						yuri.scrollFactor.y,
						yuri.scale.x,
						yuri.scale.y,
						PlayState.instance.currentStage.members.indexOf(yuri)
					];

					PlayState.instance.currentStage.remove(yuri);
					PlayState.instance.insert(PlayState.instance.members.indexOf(sideWindow) + 1, yuri);
					yuri.setPosition(6, 200);
					yuri.scrollFactor.set();
					yuri.scale.set(0.8, 0.8);
					yuri.updateHitbox();
					yuri.cameras = [camGame2];
					yuri.dance();

					PlayState.instance.currentCameraZoom = 1;
					camGame2.fade(0xFFFFFFFF, 0.5, true);
					poemVideo.anim.play('hando', true);
					poemVideo.alpha = 1;
					sideWindow.alpha = 1;
				case 504:
					FlxTween.tween(yuri, {x: -yuri.width * 1.5}, calcSectionLength(0.25), {ease: FlxEase.sineInOut});
				case 508:
					FlxTween.cancelTweensOf(yuri);
					PlayState.instance.remove(yuri);
					PlayState.instance.currentStage.insert(Std.int(dokiData[6]), yuri);
					yuri.setPosition(dokiData[0], dokiData[1]);
					yuri.scrollFactor.set(dokiData[2], dokiData[3]);
					yuri.scale.set(dokiData[4], dokiData[5]);
					yuri.updateHitbox();
					yuri.cameras = [PlayState.instance.camGame];
					yuri.dance();

					savedChar = 'monika';
					dokiData = [
						monika.x,
						monika.y,
						monika.scrollFactor.x,
						monika.scrollFactor.y,
						monika.scale.x,
						monika.scale.y,
						PlayState.instance.currentStage.members.indexOf(monika)
					];

					PlayState.instance.currentStage.remove(monika);
					PlayState.instance.insert(PlayState.instance.members.indexOf(sideWindow) + 1, monika);
					monika.setPosition(-monika.width * 1.5, 275);
					monika.scrollFactor.set();
					monika.scale.set(0.72, 0.72);
					monika.updateHitbox();
					monika.cameras = [camGame2];
					monika.dance();
					FlxTween.tween(monika, {x: 0}, calcSectionLength(0.25), {ease: FlxEase.sineInOut});
				case 640:
					PlayState.instance.remove(monika);
					PlayState.instance.currentStage.insert(Std.int(dokiData[6]), monika);
					monika.setPosition(dokiData[0], dokiData[1]);
					monika.scrollFactor.set(dokiData[2], dokiData[3]);
					monika.scale.set(dokiData[4], dokiData[5]);
					monika.updateHitbox();
					monika.cameras = [PlayState.instance.camGame];
					monika.dance();

					savedChar = '';
					camGame2.fade(0xFFFFFFFF, 0.5, true);
					poemVideo.alpha = 0.001;
					sideWindow.alpha = 0.001;
			}
		}
}