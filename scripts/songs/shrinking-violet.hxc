import flixel.FlxG;
import funkin.play.PlayState;
import flixel.tweens.FlxTween;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxEase;
import funkin.Paths;
import funkin.play.song.Song;
import funkin.play.Countdown;
import funkin.util.Constants;
import funkin.Conductor;
import funkin.util.FlxTweenUtil;
import flixel.addons.display.FlxBackdrop; 
import flixel.FlxCamera;
import funkin.save.Save;

class ShrinkingVioletSong extends Song
{
	function new()
	{
		super('shrinking-violet');
	}

	public override function isSongNew(currentDifficulty:String):Bool{
		if(Save.instance.hasBeatenSong(this.id) == false) return true;
		else return false;
	}

	var sparkleBG:FlxBackdrop;
	var sparkleFG:FlxBackdrop;
	var pinkOverlay:FlxSprite;
	//Alt
	var curDokiLight;
	var pastDokiLight;
	var encoreTime:Int;

	override function onCreate(event) {
		super.onCreate(event);
		if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
		if (PlayState.instance.isMinimalMode) return;

		sparkleBG = new FlxBackdrop(Paths.image('clubroom/YuriSparkleBG'));
		sparkleBG.scrollFactor.set(0.1, 0);
		sparkleBG.velocity.set(-16, 0);
		sparkleBG.visible = false;
		sparkleBG.setGraphicSize(Std.int(sparkleBG.width / FlxCamera.defaultZoom));
		sparkleBG.updateHitbox();
		sparkleBG.zIndex = 15;
		sparkleBG.screenCenter();
		PlayState.instance.currentStage.add(sparkleBG);

		sparkleFG = new FlxBackdrop(Paths.image('clubroom/YuriSparkleFG'));
		sparkleFG.scrollFactor.set(0.1, 0);
		sparkleFG.velocity.set(-48, 0);
		sparkleFG.setGraphicSize(Std.int((sparkleFG.width * 1.2) / FlxCamera.defaultZoom));
		sparkleFG.updateHitbox();
		sparkleFG.visible = false;
		sparkleFG.zIndex = 150;
		sparkleFG.screenCenter();
		PlayState.instance.add(sparkleFG);

		pinkOverlay = new FlxSprite(-FlxG.width * FlxG.camera.zoom, -FlxG.height * FlxG.camera.zoom).makeGraphic(FlxG.width * 3, FlxG.height * 3, 0xFFF281F2);
		pinkOverlay.alpha = 0.2;
		pinkOverlay.visible = false;
		pinkOverlay.zIndex = 200;
		pinkOverlay.blend = 12;
		pinkOverlay.scrollFactor.set();
		PlayState.instance.add(pinkOverlay);
		PlayState.instance.currentStage.refresh();

		if (PlayState.instance.currentVariation != 'alt') return;
		encoreTime = 0;
		sunshine = new FlxSprite(0, 0).loadGraphic(Paths.image('musicroom/SayoSunshine'));
		sunshine.alpha = 0.001;
		sunshine.cameras = [PlayState.instance.camHUD];
		PlayState.instance.add(sunshine);
	}

	function calcSectionLength(duration:Int){
		if (duration == null) duration = 1;
		var durSeconds = (Conductor.instance.stepLengthMs * (16 * duration)) / 1000;
		return durSeconds;
	}

	function onStepHit(event:SongTimeScriptEvent):Void
		{	
			switch(event.step)
			{
				case 784:
					//defaultCamZoom = 1.3;
					PlayState.instance.camHUD.flash(0xFFF281F2, calcSectionLength(0.2));
					sparkleBG.visible = true;
					sparkleFG.visible = true;
					pinkOverlay.visible = true;
				case 1024:
					//defaultCamZoom = 1;
				case 1040:
					if (PlayState.instance.currentVariation == 'alt') {
						encoreTime = 2;
						PlayState.instance.currentStage.getBoyfriend().idleSuffix = '-alt';
					}
					FlxTween.tween(sparkleBG, {alpha: 0}, calcSectionLength(), {ease: FlxEase.sineOut});
					FlxTween.tween(sparkleFG, {alpha: 0}, calcSectionLength(), {ease: FlxEase.sineOut});
					FlxTween.tween(pinkOverlay, {alpha: 0}, calcSectionLength(), {ease: FlxEase.sineOut});
				case 1296:
					if (PlayState.instance.currentVariation == 'alt') {
						encoreTime = 0;
						PlayState.instance.currentStage.getBoyfriend().idleSuffix = '';
					}
			}
		}

	function onBeatHit(event:SongTimeScriptEvent):Void {	
		super.onBeatHit(event);
		var curBeat = event.beat;
		switch (encoreTime)
			{
				default:
					// none
				case 1, 2:
					if (curBeat % 2 == 0)
					{
						// Hi Tioder :)
						// Set colors to an array
						var dokiLights:Array<Int> = [0xff95E0FA, 0xff8CD465, 0xffFC95D3, 0xff9E72D2];
	
						// Randomize the colors, while excluding whatever was the past light
						// so as not to repeat the same color
						curDokiLight = FlxG.random.int(0, dokiLights.length - 1, [pastDokiLight]);
						pastDokiLight = curDokiLight;
	
						var funnyFlash:FlxSprite;
	
						if (encoreTime == 2) // Can turn into a switch if need be
							funnyFlash = sunshine;
	
						FlxTween.cancelTweensOf(funnyFlash);
						funnyFlash.color = dokiLights[curDokiLight];
						funnyFlash.alpha = 1;
						FlxTween.tween(funnyFlash, {alpha: 0.001}, 1, {startDelay: 0.5});
					}
			}
	}
	
	public function onSongRetry(event):Void {
		super.onSongRetry(event);
		for (yuri in [sparkleBG, sparkleFG, pinkOverlay]){
			FlxTween.cancelTweensOf(yuri);
		}
		FlxTween.cancelTweensOf(sunshine);
		encoreTime = 0;
		sunshine.alpha = 0.001;
		sparkleBG.alpha = 1;
		sparkleFG.alpha = 1;
		pinkOverlay.alpha = 0.2;
		sparkleBG.visible = false;
		sparkleFG.visible = false;
		pinkOverlay.visible = false;
	}
}