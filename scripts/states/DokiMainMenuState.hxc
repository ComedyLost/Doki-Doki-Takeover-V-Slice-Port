import flixel.input.mouse.FlxMouseEventManager;
import haxe.Json;
import lime.utils.Assets;
import flixel.FlxG;
import flixel.FlxObject;
import flixel.FlxSprite;
import flixel.addons.display.FlxBackdrop;
import flixel.effects.FlxFlicker;
import flixel.text.FlxText;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import lime.app.Application;
import flixel.group.FlxTypedSpriteGroup;
import StringTools;
import funkin.Conductor;
import funkin.ui.MusicBeatState;
import flixel.text.FlxTextBorderStyle;
import funkin.util.Constants;
import flixel.addons.transition.FlxTransitionableState;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.story.StoryMenuState;
import funkin.ui.transition.LoadingState;
import funkin.data.song.SongRegistry;
import funkin.play.song.Song;
import funkin.Paths;
import funkin.play.PlayStatePlaylist;

typedef MenuCharacterData = 
{
	var name:String;
	var spritePos:Array<Int>;
	var atlas:String;
	var prefix:String;

	@:optional var scale:Array<Float>;
	@:optional var frames:Int;
	@:optional var looped:Bool;
}

typedef MenuCharacterJSON =
{
	var characters:Array<MenuCharacterData>;
}

class DokiMainMenuState extends MusicBeatState
{
	var curSelected:Int = 0;

	// I guess this needs to be a thing now
	// because originally, it used to be "FlxMouseEventManager.add"
	// but now you gotta put it in a variable manager.
	// Guessing this is a flixel update issue, but whatever. ~ Codexes
	var mouseManager:FlxMouseEventManager = new FlxMouseEventManager();

	var show:String = "";
	var menuItems:FlxTypedSpriteGroup<FlxText>;

	var optionShit:Array<String> = ['Story Mode', 'Freeplay', 'Credits', 'Options', 'Exit Game'];

	public static var firstStart:Bool = true;

	public var acceptInput:Bool = true;

	var logo:FlxSprite;
	var menu_character:FlxSprite;
	var shaker:FlxSprite;
	var addVally:Bool = false;

	var backdrop:FlxBackdrop;
	var logoBl:FlxSprite;
	public static var menuCharJSON:MenuCharacterJSON;

	public static var instance;

	override function create()
	{
		instance = this;

		persistentUpdate = persistentDraw = true;

		FlxG.mouse.visible = true;

		addVally = true;

		if (FlxG.sound.music != null && !FlxG.sound.music.playing)
		{
			FunkinSound.playMusic('freakyMenu-DDTO', {
       			startingVolume: 0.0,
   	   			overrideExisting: true,
   	   			restartTrack: false,
   	   			// Continue playing this music between states, until a different music track gets played.
   	   			persist: true
   			});
		}

		backdrop = new FlxBackdrop(Paths.image('scrollingBG'));
		backdrop.velocity.set(-40, -40);
		add(backdrop);

		var menuString:String = Assets.getText(Paths.json('menuCharacters'));
		var jsonFound:Bool = true;

		menuCharJSON = Json.parse(menuString);

		var twenty:Array<String> = ['together1', 'yuri', 'natsuki', 'sayori', 'pixelmonika', 'senpai'];
		var ten:Array<String> = ['sunnat', 'yuritabi', 'minusmonikapixel', 'yuriken', 'sayominus', 'cyrixstatic', 'zipori', 'nathaachama'];
		var two:Array<String> = ['fumo'];

		// Push certain strings into arrays after save checks here
		twenty.push('protag');

		ten.push('deeppoems');
		ten.push('akimonika');
		ten.push('indiehorror');

		ten.push('nathank');

		ten.push('sayomongus');

		var random:Float = FlxG.random.float();
		if (random < 0.60) // 60% chance
			show = selectMenuCharacter(twenty);
		else if (random >= 0.60 && random < 0.98) // 38% chance
			show = selectMenuCharacter(ten);
		else // 2% chance 
			show = selectMenuCharacter(two);
		
		if (jsonFound)
		{
			for (char in menuCharJSON.characters)
			{
				if (char.name == show)
				{
					// Found the character in the menuCharacter.json file
					trace('found ${show} with ${random}');
					menu_character = new FlxSprite(char.spritePos[0], char.spritePos[1]);
					menu_character.frames = Paths.getSparrowAtlas(char.atlas);
					if (char.scale != null)
						menu_character.scale.set(char.scale[0], char.scale[1]);
					menu_character.animation.addByPrefix('play', char.prefix, 
						(char.frames != null ? char.frames : 24), (char.looped != null ? char.looped : false));
					// Break the for loop so we can move on from this lol
					break;
				}
			}
		}

		if (menu_character == null)
		{
			// Just gotta use the default together asset if that for-loop doesn't work
			trace("For loop didn't work. Oh well!");
			menu_character = new FlxSprite(490, 50);
			menu_character.frames = Paths.getSparrowAtlas("menucharacters/dokitogetheralt");
			menu_character.scale.set(0.77, 0.77);
			menu_character.animation.addByPrefix('play', "Doki together club", 21, false);
		}
		menu_character.updateHitbox();
		menu_character.animation.play('play');
		add(menu_character);

		logo = new FlxSprite(-260, 0).loadGraphic(Paths.image('Credits_LeftSide'));
		add(logo);
		if (firstStart)
			FlxTween.tween(logo, {x: -60}, 1.2, {
				ease: FlxEase.elasticOut,
				onComplete: function(flxTween:FlxTween)
				{
					firstStart = false;
					changeItem(0);
				}
			});
		else
			logo.x = -60;

		logoBl = new FlxSprite(-160, -40);
		logoBl.frames = Paths.getSparrowAtlas('DDLCStart_Screen_Assets');
		logoBl.scale.set(0.5, 0.5);
		logoBl.animation.addByPrefix('bump', 'logo bumpin', 24, false);
		logoBl.animation.play('bump');
		logoBl.updateHitbox();
		add(logoBl);
		if (firstStart)
			FlxTween.tween(logoBl, {x: 40}, 1.2, {
				ease: FlxEase.elasticOut,
				onComplete: function(flxTween:FlxTween)
				{
					firstStart = false;
					changeItem(0);
				}
			});
		else
			logoBl.x = 40;

		menuItems = new FlxTypedSpriteGroup();
		add(menuItems);

		for (i in 0...optionShit.length)
		{
			var menuItem:FlxText = new FlxText(-350, 370 + (i * 50), 0, optionShit[i]);
			menuItem.setFormat(Paths.font("riffic.ttf"), 27, 0xFFFFFFFF, 'left');
			menuItem.setBorderStyle(FlxTextBorderStyle.OUTLINE, 0xFFFF7CFF, 2);
			menuItem.ID = i;
			menuItems.add(menuItem);

			if (firstStart)
				FlxTween.tween(menuItem, {x: 50}, 1.2 + (i * 0.2), {
					ease: FlxEase.elasticOut,
					onComplete: function(flxTween:FlxTween)
					{
						firstStart = false;
						changeItem(0);
					}
				});
			else
				menuItem.x = 50;

			// Add menu item into mouse manager, so it can be selected by cursor
			mouseManager.add(menuItem, onMouseDown, null, onMouseOver);
		}

		shaker = new FlxSprite(1132, 538);
		shaker.frames = Paths.getSparrowAtlas("shaker");
		shaker.animation.addByPrefix('play', "Shaker", 21, false);
		shaker.animation.play('play');
		if (addVally)
			add(shaker);

		add(mouseManager);

		var versionShit:FlxText = new FlxText(-350, FlxG.height - 24, 0, Constants.VERSION, 12);
		versionShit.scrollFactor.set();
		versionShit.setFormat(Paths.font("aller.ttf"), 16, 0xFFFFFFFF, 'left', FlxTextBorderStyle.OUTLINE, 0xFF000000);
		add(versionShit);

		if (firstStart)
			FlxTween.tween(versionShit, {x: 5}, 1.2, {
				ease: FlxEase.elasticOut,
				onComplete: function(flxTween:FlxTween)
				{
					firstStart = false;
					changeItem(0);
				}
			});
		else
			versionShit.x = 5;

		changeItem(0);

		super.create();
	}

	var selectedSomethin:Bool = false;

	override function update(elapsed:Float)
	{
		if (FlxG.sound.music != null && FlxG.sound.music.volume < 0.8)
			FlxG.sound.music.volume += 0.5 * FlxG.elapsed;

		if (!selectedSomethin && acceptInput)
		{
			if (shaker != null && addVally && FlxG.mouse.overlaps(shaker) && FlxG.mouse.justPressed)
				openSong();

			if (controls.UI_UP_P)
			{
				FlxG.sound.play(Paths.sound('scrollMenu'));
				changeItem(-1);
			}
				
			if (controls.UI_DOWN_P)
			{
				FlxG.sound.play(Paths.sound('scrollMenu'));
				changeItem(1);
			}	
			
			if (controls.RESET)
				FlxG.resetState();

			if (controls.ACCEPT)
				selectThing();
		}

		if (FlxG.sound.music != null)
			Conductor.instance.update();

		super.update(elapsed);
	}

	function goToState()
	{
		var daChoice:String = optionShit[curSelected];

		switch (daChoice)
		{
			case 'Story Mode':
				var targetState:NextState = () -> new StoryMenuState();
				FlxG.switchState(targetState);
				trace("Story Menu Selected");
			case 'Freeplay':
				FlxG.state.persistentDraw = true;
				FlxG.state.persistentUpdate = false;
			    // Freeplay has its own custom transition
    			FlxTransitionableState.skipNextTransIn = true;
    			FlxTransitionableState.skipNextTransOut = true;

    			var targetCharacter:Null<String> = null;

    			FlxG.state.openSubState(new FreeplayState(
        		{
        			character: targetCharacter
        		}));
				trace("Freeplay Menu Selected");
			case 'Credits':
				var targetState:NextState = () -> new funkin.ui.credits.CreditsState();
				FlxG.switchState(targetState);
				trace("Credits Menu Selected");
			case 'Gallery':
				return; //Does nothing
				var targetState:NextState = () -> new StoryMenuState();
				FlxG.switchState(targetState);
				trace("La Galeria Selected");
			case 'Options':
				var targetState:NextState = () -> new funkin.ui.options.OptionsState();
				FlxG.switchState(targetState);
			case 'Exit Game':
				Application.current.window.close();
		}
	}

	function changeItem(huh:Int = 0)
	{
		curSelected += huh;

		if (curSelected >= optionShit.length)
			curSelected = 0;
		if (curSelected < 0)
			curSelected = optionShit.length - 1;

		menuItems.forEach(function(txt:FlxText)
		{
			if (txt.ID == curSelected)
				txt.setBorderStyle(FlxTextBorderStyle.OUTLINE, 0xFFFFCFFF, 2);
			else
				txt.setBorderStyle(FlxTextBorderStyle.OUTLINE, 0xFFFF7CFF, 2);
		});
	}

	function selectThing():Void
	{
		acceptInput = false;
		selectedSomethin = true;
		FlxG.sound.play(Paths.sound('confirmMenu'));

		menuItems.forEach(function(txt:FlxText)
		{
			if (curSelected != txt.ID)
			{
				FlxTween.tween(txt, {alpha: 0}, 1.3, {
					ease: FlxEase.quadOut,
					onComplete: function(twn:FlxTween)
					{
						txt.kill();
					}
				});
			}
			else
			{
				FlxFlicker.flicker(txt, 1, 0.06, false, false, function(flick:FlxFlicker)
				{
					goToState();
				});
			}
		});
	}


	function onMouseDown(spr:FlxSprite):Void
	{
		if (!selectedSomethin && acceptInput)
			selectThing();
	}

	function onMouseOver(spr:FlxSprite):Void
	{
		if (!selectedSomethin && acceptInput)
		{
			if (curSelected != spr.ID)
				FlxG.sound.play(Paths.sound('scrollMenu'));
	
			if (!selectedSomethin)
				curSelected = spr.ID;
		}

		changeItem(0);
	}

	override function beatHit()
	{
		super.beatHit();

		logoBl.animation.play('bump', true);

		if (!menu_character.animation.curAnim.looped && Conductor.instance.currentBeat % 2 == 0)
			menu_character.animation.play('play', true);

		if (shaker != null)
			shaker.animation.play('play');
	}

	function openSong()
	{
		acceptInput = false;
		selectedSomethin = true;
		FlxG.sound.play(Paths.sound('va11hallaSelect'));
		FlxFlicker.flicker(shaker, 1, 0.06, false, false);

    	var targetSong:Song = SongRegistry.instance.fetchEntry('drinks-on-me');
    	var targetDifficultyId:String = 'normal';
    	var targetVariation:String = targetSong.getFirstValidVariation(targetDifficultyId);
    	PlayStatePlaylist.campaignId = 'drinks-on-me';
    	var targetDifficulty:SongDifficulty = targetSong.getDifficulty(targetDifficultyId, targetVariation);
    	// TODO: Change this with alternate instrumentals
    	var targetInstId:String = targetDifficulty.characters.instrumental;
    
    	new FlxTimer().start(1, function(tmr:FlxTimer) {
        	Paths.setCurrentLevel('drinks-on-me');
        	LoadingState.loadPlayState({
            	targetSong: targetSong,
            	targetDifficulty: targetDifficultyId,
            	targetVariation: targetVariation,
            	targetInstrumental: targetInstId,
            	practiceMode: false,
            	minimalMode: false,
            	botPlayMode: false,
            	// TODO: Make these an option! It's currently only accessible via chart editor.
            	// startTimestamp: 0.0,
            	// playbackRate: 0.5,
            	// botPlayMode: true,
          	}, true);  
      	});
	}

	function selectMenuCharacter(array:Array<String>):String
	{
		var index:Int = 0;
		if (array.length >= 2)
			index = FlxG.random.int(0, array.length);

		var char:String = '';
		switch (array[index])
		{
			default:
				char = array[index];
			case 'together1':
				char = 'together';
			case 'pixelmonika':
				char = 'monika';
		}

		// Just in case I messed something up
		if (char == '')
		{
			char = 'together';
			return char;
		}

		return char;
	}
}
