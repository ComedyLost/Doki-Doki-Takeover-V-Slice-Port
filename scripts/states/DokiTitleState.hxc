import flixel.FlxG;
import flixel.FlxSprite;
import flixel.addons.display.FlxBackdrop;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import openfl.Assets;
import funkin.graphics.shaders.ColorSwap;
import funkin.graphics.shaders.LeftMaskShader;
import funkin.ui.MusicBeatState;
import funkin.Conductor;
import flixel.addons.display.FlxBackdrop;
import funkin.Paths;
import flixel.group.FlxTypedSpriteGroup;
import funkin.ui.AtlasText;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.title.AttractState;
import funkin.audio.FunkinSound;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.Module;
import lime.app.Application;
import funkin.modding.base.ScriptedMusicBeatState;
import flixel.util.FlxSave;
import flixel.input.gamepad.FlxGamepad;

import StringTools;

class DokiTitleState extends MusicBeatState
{
	public static var initialized:Bool = false;

	var blackScreen:FlxSprite;
	var credGroup:FlxTypedSpriteGroup<Dynamic>;
	var credTextShit:AtlasText;
	var textGroup:FlxTypedSpriteGroup<Dynamic>;

	var moniSpr:FlxSprite;
	var tbdSpr:FlxSprite;
	var doki:FlxSprite;

	var curWacky:Array<String> = [];

	var wackyImage:FlxSprite;
	var swagShader:ColorSwap;

  	override public function create():Void {
    	super.create();
		save = new FlxSave();
        save.bind("TakeoverOptions");

		initialized = ModuleHandler.getModule("TitleScreenReplace").scriptGet("initialized", []);

		Conductor.instance.update(0);

    	swagShader = new ColorSwap();

		var array = getIntroTextShit();

    	curWacky = array[FlxG.random.int(0, array.length - 1)];
    	FlxG.sound.cache(Paths.music('freakyMenu/freakyMenu'));
    	FlxG.sound.cache(Paths.music('girlfriendsRingtone/girlfriendsRingtone'));

    	// DEBUG BULLSHIT

    	if (!initialized) new FlxTimer().start(1, function(tmr:FlxTimer) {
    		startIntro();
    	});
    	else
      		startIntro();
  	}

	var dokiApp:FlxSprite;
	var bottom:Int;
	var top:Int;


	var logoBl:FlxSprite;
	var gfDance:FlxSprite;
	var backdrop:FlxBackdrop;
	var creditsBG:FlxBackdrop;
	var scanline:FlxBackdrop;
	var gradient:FlxSprite;
	var danceLeft:Bool = false;
	var titleText:FlxSprite;

	function startIntro()
	{
		danceLeft = false;
		FunkinSound.playMusic('freakyMenu-DDTO',
		{
       		startingVolume: 0.0,
   	   		overrideExisting: true,
   	   		restartTrack: false,
   	   		// Continue playing this music between states, until a different music track gets played.
   	   		persist: true
   		});
		// Fade from 0.0 to 1 over 4 seconds
		FlxG.sound.music.fadeIn(4.0, 0.0, 1.0);

		backdrop = new FlxBackdrop(Paths.image('scrollingBG'));
		backdrop.velocity.set(-10, 0);
		backdrop.shader = swagShader.shader;
		add(backdrop);

		creditsBG = new FlxBackdrop(Paths.image('credits/pocBackground'));
		creditsBG.velocity.set(-50, 0);
		add(creditsBG);

		var scanline:FlxBackdrop = new FlxBackdrop(Paths.image('credits/scanlines'));
		scanline.velocity.set(0, 20);
		add(scanline);

		var gradient:FlxSprite = new FlxSprite().loadGraphic(Paths.image('credits/gradent'));
		gradient.scrollFactor.set(0.1, 0.1);
		gradient.screenCenter();
		gradient.setGraphicSize(Std.int(gradient.width * 1.4));
		add(gradient);

		logoBl = new FlxSprite(-40, -12);
		logoBl.frames = Paths.getSparrowAtlas('intro/logoBumpinPlusDoki');
		logoBl.setGraphicSize(Std.int(logoBl.width * 0.8));
		logoBl.animation.addByPrefix('bump', 'logo bumpin', 24, false);
		logoBl.shader = swagShader.shader;
		logoBl.updateHitbox();

		gfDance = new FlxSprite(FlxG.width * 0.4, FlxG.height * 0.07);
		gfDance.frames = Paths.getSparrowAtlas('intro/gfDanceTitleDoki');
		gfDance.animation.addByIndices('danceLeft', 'gfDance', [30, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "", 24, false);
		gfDance.animation.addByIndices('danceRight', 'gfDance', [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "", 24, false);
		add(gfDance);
		add(logoBl);
	
		gfDance.shader = swagShader.shader;

		titleText = new FlxSprite(170, FlxG.height * 0.8);
		titleText.frames = Paths.getSparrowAtlas('intro/titleEnterDoki');
		titleText.animation.addByPrefix('idle', "Press Enter to Begin", 24);
		titleText.animation.addByPrefix('press', "ENTER PRESSED", 24);
		titleText.animation.play('idle');
		titleText.updateHitbox();
		add(titleText);

		credGroup = new FlxTypedSpriteGroup();
		add(credGroup);
		textGroup = new FlxTypedSpriteGroup();

		blackScreen = new FlxSprite().makeGraphic(FlxG.width, FlxG.height, 0xFF000000);
		credGroup.add(blackScreen);

		credTextShit = new AtlasText(0, 0, "ninjamuffin99\nPhantomArcade\nkawaisprite\nevilsk8er", true);
		credTextShit.screenCenter();

		credTextShit.visible = false;

		// Put whatever hueh you want in the array
		var huehArray:Array<String> = ['TBDHueh', 'NatHueh', 'SayoHueh', 'YuriHueh', 'MoniHueh', 'ProtagHueh'];
		var hueh:String = huehArray[FlxG.random.int(0, huehArray.length - 1)];

		// hueh = 'TBDHueh'; // Forced hueh string
		moniSpr = new FlxSprite(0, FlxG.height * .7).loadGraphic(Paths.image('hueh/' + hueh));
		moniSpr.visible = false;
		moniSpr.setGraphicSize(Std.int(moniSpr.width * 1.2));
		moniSpr.updateHitbox();
		moniSpr.screenCenter(0x01);
		add(moniSpr);

		tbdSpr = new FlxSprite(0, FlxG.height * .45).loadGraphic(Paths.image('TBDLogo'));
		tbdSpr.visible = false;
		tbdSpr.setGraphicSize(Std.int(tbdSpr.width * 0.9));
		tbdSpr.updateHitbox();
		tbdSpr.screenCenter(0x01);
		add(tbdSpr);

		//Handling doki stuff
		dokiApp = new FlxSprite(0, 0);

		// Before, Natsuki had a 4/5 chance of appearing.
		// Totally not fair!
		// [Pop up string, Bottom, Top]
		var dokiArray:Array<Array<Dynamic>> = [
			['NatsukiPopup', 770, 270], 
			['SayoriPopup', 770, 270],  
			['YuriPopup', 770, 240],
			['MonikaPopup', 770, 180],
			['ProtagPopup', 770, 170]
		];

		// The selected doki
		var selected:Int = FlxG.random.int(0, dokiArray.length - 1);
		// selected = 0 // Forced doki for testing

		var dokiIndex:String = dokiArray[selected][0];
		bottom = dokiArray[selected][1];
		top = dokiArray[selected][2];

		dokiApp.setPosition(0, bottom);
		dokiApp.frames = Paths.getSparrowAtlas('intro/' + dokiIndex);
		dokiApp.animation.addByPrefix('pop', dokiIndex, 26, false);
		dokiApp.screenCenter(0x01);
		add(dokiApp);

		//preload maybe
		var predoki = new FlxSprite(0, 0);
		predoki.frames = Paths.getSparrowAtlas('intro/' + dokiIndex);
		predoki.animation.addByPrefix('pop', dokiIndex, 26, false);
		predoki.screenCenter();
		predoki.alpha = 0.001;
		add(predoki);

		doki = new FlxSprite(50, 100);
		doki.frames = Paths.getSparrowAtlas('intro/DOKI DOKI');
		doki.animation.addByPrefix('doki', "Doki centered", 24, false);
		doki.alpha = 0.001;
		doki.updateHitbox();
		add(doki);

		FlxTween.tween(credTextShit, {y: credTextShit.y + 20}, 2.9, {ease: FlxEase.quadInOut, type: 4});

		if (initialized)
			skipIntro();
		else {
			initialized = true;
			ModuleHandler.getModule("TitleScreenReplace").scriptCall("setInitialized", [true]);
		}

		if (FlxG.sound.music != null) FlxG.sound.music.onComplete = moveToAttract;
	}

	function moveToAttract():Void {
    	FlxG.switchState(() -> new AttractState());
  	}

	function getIntroTextShit():Array<Array<String>>
	{
		var fullText:String = Assets.getText(Paths.txt('introDokiText'));

    	var firstArray:Array<String> = fullText.split('\n').filter(function(s:String) return s != '');
		var swagGoodArray:Array<Array<String>> = [];

		for (i in firstArray)
			swagGoodArray.push(i.split('--'));

		return swagGoodArray;
	}

	var transitioning:Bool = false;

	override function update(elapsed:Float)
	{
		Conductor.instance.update();
		
		if (controls.BACK) Application.current.window.close();

		if (FlxG.keys.justPressed.Y) {
    		FlxTween.cancelTweensOf(FlxG.stage.window, ['x', 'y']);
     		FlxTween.tween(FlxG.stage.window, {x: FlxG.stage.window.x + 300}, 1.4, {ease: FlxEase.quadInOut, type: 4, startDelay: 0.35});
 			FlxTween.tween(FlxG.stage.window, {y: FlxG.stage.window.y + 100}, 0.7, {ease: FlxEase.quadInOut, type: 4});
    	}

		var pressedEnter:Bool = controls.ACCEPT || FlxG.mouse.justPressed;
    	var gamepad:FlxGamepad = FlxG.gamepads.lastActive;

    	if (gamepad != null) {
      		if (gamepad.justPressed.START) pressedEnter = true;
    	}

    	if (pressedEnter && transitioning && skippedIntro) {
			var targetState:NextState = () -> new MainMenuState(true);
			//if (save.data.menus) targetState = ScriptedMusicBeatState.init("DokiMainMenuState");
      		FlxG.switchState(targetState);
    	}

		if (pressedEnter && !transitioning && skippedIntro)
		{
			titleText.animation.play('press');

			FlxG.camera.flash(0xFFFFFFFF, 1);
			FlxG.sound.play(Paths.sound('confirmMenu'), 0.7);

			transitioning = true;

			var targetState:NextState = () -> new MainMenuState(true);
			//if (save.data.menus) targetState = ScriptedMusicBeatState.init("DokiMainMenuState");
			new FlxTimer().start(2, function(tmr:FlxTimer)
			{
        		FlxG.switchState(targetState);
			});
		}

	    if (controls.UI_LEFT) swagShader.update(-elapsed * 0.1);
	    if (controls.UI_RIGHT) swagShader.update(elapsed * 0.1);


		if (pressedEnter && !skippedIntro && initialized) skipIntro();

		super.update(elapsed);
	}

	function createCoolText(textArray:Array<String>)
	{
		for (i in 0...textArray.length)
		{
			var money:AtlasText = new AtlasText(0, 0, textArray[i], 'bold');
			money.screenCenter(0x01);
			money.y += (i * 60) + 200;
			credGroup.add(money);
			textGroup.add(money);
		}
	}

	function addMoreText(text:String)
	{
		var coolText:AtlasText = new AtlasText(0, 0, text, 'bold');
		coolText.screenCenter(0x01);
		coolText.y += (textGroup.length * 60) + 200;
		credGroup.add(coolText);
		textGroup.add(coolText);
	}

	function deleteCoolText()
	{
		if (credGroup == null || textGroup == null) return;

		while (textGroup.members.length > 0)
		{
			credGroup.remove(textGroup.members[0], true);
			textGroup.remove(textGroup.members[0], true);
		}
	}

	override function beatHit()
	{
		super.beatHit();

		if (logoBl != null && logoBl.animation != null) logoBl.animation.play('bump', true);
			danceLeft = !danceLeft;

		if (gfDance != null && gfDance.animation != null){
			if (danceLeft)
				gfDance.animation.play('danceRight');
			else
				gfDance.animation.play('danceLeft');
		}
		
		switch (Conductor.instance.currentBeat)
		{
			case 1:
				createCoolText(['Team TBD']);
			case 3:
				//addMoreText('presents');
				tbdSpr.visible = true;
			case 4:
				tbdSpr.visible = false;
				deleteCoolText();
			case 5:
				createCoolText(['Not Powered', 'by']);
			case 7:
				addMoreText('Hueh Engine');
				moniSpr.visible = true;
			case 8:
				deleteCoolText();
				moniSpr.visible = false;
			case 9:
				createCoolText([curWacky[0]]);
			case 11:
				addMoreText(curWacky[1]);
			case 12:
				deleteCoolText();
			case 13:
				// addMoreText('Doki');
				dokiApp.animation.play('pop');
				FlxTween.tween(dokiApp.scale, {x: 0.75}, 0.15, {ease: FlxEase.sineIn, startDelay: 0.2, onComplete: function(twn:FlxTween)
					{
						FlxTween.tween(dokiApp.scale, {x: 1}, 0.2, {ease: FlxEase.bounceInOut});
					}});
				FlxTween.tween(dokiApp, {y: top}, 0.15, {ease: FlxEase.sineIn, startDelay: 0.2});
			case 14:
				doki.alpha = 1;
				doki.animation.play('doki');
			case 15:
			case 16:
				skipIntro();
		}
	}

	var skippedIntro:Bool = false;

	function skipIntro():Void
	{
		if (!skippedIntro)
		{
			remove(moniSpr);
			remove(tbdSpr);
			remove(doki);
			remove(dokiApp);

			FlxG.camera.flash(0xFFFFFFFF, 4);
			remove(credGroup);
			skippedIntro = true;
		}
	}
}
